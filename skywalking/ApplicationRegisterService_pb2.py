# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ApplicationRegisterService.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import KeyWithIntegerValue_pb2 as KeyWithIntegerValue__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='ApplicationRegisterService.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n ApplicationRegisterService.proto\x1a\x19KeyWithIntegerValue.proto\"&\n\x0b\x41pplication\x12\x17\n\x0f\x61pplicationCode\x18\x01 \x03(\t\"?\n\x12\x41pplicationMapping\x12)\n\x0b\x61pplication\x18\x01 \x03(\x0b\x32\x14.KeyWithIntegerValue2M\n\x1a\x41pplicationRegisterService\x12/\n\x08register\x12\x0c.Application\x1a\x13.ApplicationMapping\"\x00\x42$\n org.skywalking.apm.network.protoP\x01\x62\x06proto3')
  ,
  dependencies=[KeyWithIntegerValue__pb2.DESCRIPTOR,])




_APPLICATION = _descriptor.Descriptor(
  name='Application',
  full_name='Application',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='applicationCode', full_name='Application.applicationCode', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=63,
  serialized_end=101,
)


_APPLICATIONMAPPING = _descriptor.Descriptor(
  name='ApplicationMapping',
  full_name='ApplicationMapping',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='application', full_name='ApplicationMapping.application', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=103,
  serialized_end=166,
)

_APPLICATIONMAPPING.fields_by_name['application'].message_type = KeyWithIntegerValue__pb2._KEYWITHINTEGERVALUE
DESCRIPTOR.message_types_by_name['Application'] = _APPLICATION
DESCRIPTOR.message_types_by_name['ApplicationMapping'] = _APPLICATIONMAPPING
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Application = _reflection.GeneratedProtocolMessageType('Application', (_message.Message,), dict(
  DESCRIPTOR = _APPLICATION,
  __module__ = 'ApplicationRegisterService_pb2'
  # @@protoc_insertion_point(class_scope:Application)
  ))
_sym_db.RegisterMessage(Application)

ApplicationMapping = _reflection.GeneratedProtocolMessageType('ApplicationMapping', (_message.Message,), dict(
  DESCRIPTOR = _APPLICATIONMAPPING,
  __module__ = 'ApplicationRegisterService_pb2'
  # @@protoc_insertion_point(class_scope:ApplicationMapping)
  ))
_sym_db.RegisterMessage(ApplicationMapping)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n org.skywalking.apm.network.protoP\001'))

_APPLICATIONREGISTERSERVICE = _descriptor.ServiceDescriptor(
  name='ApplicationRegisterService',
  full_name='ApplicationRegisterService',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=168,
  serialized_end=245,
  methods=[
  _descriptor.MethodDescriptor(
    name='register',
    full_name='ApplicationRegisterService.register',
    index=0,
    containing_service=None,
    input_type=_APPLICATION,
    output_type=_APPLICATIONMAPPING,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_APPLICATIONREGISTERSERVICE)

DESCRIPTOR.services_by_name['ApplicationRegisterService'] = _APPLICATIONREGISTERSERVICE

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class ApplicationRegisterServiceStub(object):
    """register service for ApplicationCode, this service is called when service starts.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.register = channel.unary_unary(
          '/ApplicationRegisterService/register',
          request_serializer=Application.SerializeToString,
          response_deserializer=ApplicationMapping.FromString,
          )


  class ApplicationRegisterServiceServicer(object):
    """register service for ApplicationCode, this service is called when service starts.
    """

    def register(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_ApplicationRegisterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'register': grpc.unary_unary_rpc_method_handler(
            servicer.register,
            request_deserializer=Application.FromString,
            response_serializer=ApplicationMapping.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'ApplicationRegisterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaApplicationRegisterServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """register service for ApplicationCode, this service is called when service starts.
    """
    def register(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaApplicationRegisterServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """register service for ApplicationCode, this service is called when service starts.
    """
    def register(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    register.future = None


  def beta_create_ApplicationRegisterService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('ApplicationRegisterService', 'register'): Application.FromString,
    }
    response_serializers = {
      ('ApplicationRegisterService', 'register'): ApplicationMapping.SerializeToString,
    }
    method_implementations = {
      ('ApplicationRegisterService', 'register'): face_utilities.unary_unary_inline(servicer.register),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_ApplicationRegisterService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('ApplicationRegisterService', 'register'): Application.SerializeToString,
    }
    response_deserializers = {
      ('ApplicationRegisterService', 'register'): ApplicationMapping.FromString,
    }
    cardinalities = {
      'register': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'ApplicationRegisterService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)

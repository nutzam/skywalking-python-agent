# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: DiscoveryService.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import Downstream_pb2 as Downstream__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='DiscoveryService.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x16\x44iscoveryService.proto\x1a\x10\x44ownstream.proto\"n\n\x13\x41pplicationInstance\x12\x15\n\rapplicationId\x18\x01 \x01(\x05\x12\x11\n\tagentUUID\x18\x02 \x01(\t\x12\x14\n\x0cregisterTime\x18\x03 \x01(\x03\x12\x17\n\x06osinfo\x18\x04 \x01(\x0b\x32\x07.OSInfo\"R\n\x1a\x41pplicationInstanceMapping\x12\x15\n\rapplicationId\x18\x01 \x01(\x05\x12\x1d\n\x15\x61pplicationInstanceId\x18\x02 \x01(\x05\"\x81\x01\n\x1a\x41pplicationInstanceRecover\x12\x15\n\rapplicationId\x18\x01 \x01(\x05\x12\x1d\n\x15\x61pplicationInstanceId\x18\x02 \x01(\x05\x12\x14\n\x0cregisterTime\x18\x03 \x01(\x03\x12\x17\n\x06osinfo\x18\x04 \x01(\x0b\x32\x07.OSInfo\"T\n\x1c\x41pplicationInstanceHeartbeat\x12\x1d\n\x15\x61pplicationInstanceId\x18\x01 \x01(\x05\x12\x15\n\rheartbeatTime\x18\x02 \x01(\x03\"L\n\x06OSInfo\x12\x0e\n\x06osName\x18\x01 \x01(\t\x12\x10\n\x08hostname\x18\x02 \x01(\t\x12\x11\n\tprocessNo\x18\x03 \x01(\x05\x12\r\n\x05ipv4s\x18\x04 \x03(\t\">\n\x15ServiceNameCollection\x12%\n\x08\x65lements\x18\x01 \x03(\x0b\x32\x13.ServiceNameElement\"L\n\x1cServiceNameMappingCollection\x12,\n\x08\x65lements\x18\x01 \x03(\x0b\x32\x1a.ServiceNameMappingElement\"T\n\x19ServiceNameMappingElement\x12\x11\n\tserviceId\x18\x01 \x01(\x05\x12$\n\x07\x65lement\x18\x02 \x01(\x0b\x32\x13.ServiceNameElement\"@\n\x12ServiceNameElement\x12\x13\n\x0bserviceName\x18\x01 \x01(\t\x12\x15\n\rapplicationId\x18\x02 \x01(\x05\x32\xd5\x01\n\x18InstanceDiscoveryService\x12?\n\x08register\x12\x14.ApplicationInstance\x1a\x1b.ApplicationInstanceMapping\"\x00\x12\x39\n\theartbeat\x12\x1d.ApplicationInstanceHeartbeat\x1a\x0b.Downstream\"\x00\x12=\n\x0fregisterRecover\x12\x1b.ApplicationInstanceRecover\x1a\x0b.Downstream\"\x00\x32\x63\n\x1bServiceNameDiscoveryService\x12\x44\n\tdiscovery\x12\x16.ServiceNameCollection\x1a\x1d.ServiceNameMappingCollection\"\x00\x42$\n org.skywalking.apm.network.protoP\x01\x62\x06proto3')
  ,
  dependencies=[Downstream__pb2.DESCRIPTOR,])




_APPLICATIONINSTANCE = _descriptor.Descriptor(
  name='ApplicationInstance',
  full_name='ApplicationInstance',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='applicationId', full_name='ApplicationInstance.applicationId', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='agentUUID', full_name='ApplicationInstance.agentUUID', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='registerTime', full_name='ApplicationInstance.registerTime', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='osinfo', full_name='ApplicationInstance.osinfo', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=44,
  serialized_end=154,
)


_APPLICATIONINSTANCEMAPPING = _descriptor.Descriptor(
  name='ApplicationInstanceMapping',
  full_name='ApplicationInstanceMapping',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='applicationId', full_name='ApplicationInstanceMapping.applicationId', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='applicationInstanceId', full_name='ApplicationInstanceMapping.applicationInstanceId', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=156,
  serialized_end=238,
)


_APPLICATIONINSTANCERECOVER = _descriptor.Descriptor(
  name='ApplicationInstanceRecover',
  full_name='ApplicationInstanceRecover',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='applicationId', full_name='ApplicationInstanceRecover.applicationId', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='applicationInstanceId', full_name='ApplicationInstanceRecover.applicationInstanceId', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='registerTime', full_name='ApplicationInstanceRecover.registerTime', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='osinfo', full_name='ApplicationInstanceRecover.osinfo', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=241,
  serialized_end=370,
)


_APPLICATIONINSTANCEHEARTBEAT = _descriptor.Descriptor(
  name='ApplicationInstanceHeartbeat',
  full_name='ApplicationInstanceHeartbeat',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='applicationInstanceId', full_name='ApplicationInstanceHeartbeat.applicationInstanceId', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='heartbeatTime', full_name='ApplicationInstanceHeartbeat.heartbeatTime', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=372,
  serialized_end=456,
)


_OSINFO = _descriptor.Descriptor(
  name='OSInfo',
  full_name='OSInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='osName', full_name='OSInfo.osName', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='hostname', full_name='OSInfo.hostname', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='processNo', full_name='OSInfo.processNo', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ipv4s', full_name='OSInfo.ipv4s', index=3,
      number=4, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=458,
  serialized_end=534,
)


_SERVICENAMECOLLECTION = _descriptor.Descriptor(
  name='ServiceNameCollection',
  full_name='ServiceNameCollection',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='elements', full_name='ServiceNameCollection.elements', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=536,
  serialized_end=598,
)


_SERVICENAMEMAPPINGCOLLECTION = _descriptor.Descriptor(
  name='ServiceNameMappingCollection',
  full_name='ServiceNameMappingCollection',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='elements', full_name='ServiceNameMappingCollection.elements', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=600,
  serialized_end=676,
)


_SERVICENAMEMAPPINGELEMENT = _descriptor.Descriptor(
  name='ServiceNameMappingElement',
  full_name='ServiceNameMappingElement',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='serviceId', full_name='ServiceNameMappingElement.serviceId', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='element', full_name='ServiceNameMappingElement.element', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=678,
  serialized_end=762,
)


_SERVICENAMEELEMENT = _descriptor.Descriptor(
  name='ServiceNameElement',
  full_name='ServiceNameElement',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='serviceName', full_name='ServiceNameElement.serviceName', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='applicationId', full_name='ServiceNameElement.applicationId', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=764,
  serialized_end=828,
)

_APPLICATIONINSTANCE.fields_by_name['osinfo'].message_type = _OSINFO
_APPLICATIONINSTANCERECOVER.fields_by_name['osinfo'].message_type = _OSINFO
_SERVICENAMECOLLECTION.fields_by_name['elements'].message_type = _SERVICENAMEELEMENT
_SERVICENAMEMAPPINGCOLLECTION.fields_by_name['elements'].message_type = _SERVICENAMEMAPPINGELEMENT
_SERVICENAMEMAPPINGELEMENT.fields_by_name['element'].message_type = _SERVICENAMEELEMENT
DESCRIPTOR.message_types_by_name['ApplicationInstance'] = _APPLICATIONINSTANCE
DESCRIPTOR.message_types_by_name['ApplicationInstanceMapping'] = _APPLICATIONINSTANCEMAPPING
DESCRIPTOR.message_types_by_name['ApplicationInstanceRecover'] = _APPLICATIONINSTANCERECOVER
DESCRIPTOR.message_types_by_name['ApplicationInstanceHeartbeat'] = _APPLICATIONINSTANCEHEARTBEAT
DESCRIPTOR.message_types_by_name['OSInfo'] = _OSINFO
DESCRIPTOR.message_types_by_name['ServiceNameCollection'] = _SERVICENAMECOLLECTION
DESCRIPTOR.message_types_by_name['ServiceNameMappingCollection'] = _SERVICENAMEMAPPINGCOLLECTION
DESCRIPTOR.message_types_by_name['ServiceNameMappingElement'] = _SERVICENAMEMAPPINGELEMENT
DESCRIPTOR.message_types_by_name['ServiceNameElement'] = _SERVICENAMEELEMENT
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

ApplicationInstance = _reflection.GeneratedProtocolMessageType('ApplicationInstance', (_message.Message,), dict(
  DESCRIPTOR = _APPLICATIONINSTANCE,
  __module__ = 'DiscoveryService_pb2'
  # @@protoc_insertion_point(class_scope:ApplicationInstance)
  ))
_sym_db.RegisterMessage(ApplicationInstance)

ApplicationInstanceMapping = _reflection.GeneratedProtocolMessageType('ApplicationInstanceMapping', (_message.Message,), dict(
  DESCRIPTOR = _APPLICATIONINSTANCEMAPPING,
  __module__ = 'DiscoveryService_pb2'
  # @@protoc_insertion_point(class_scope:ApplicationInstanceMapping)
  ))
_sym_db.RegisterMessage(ApplicationInstanceMapping)

ApplicationInstanceRecover = _reflection.GeneratedProtocolMessageType('ApplicationInstanceRecover', (_message.Message,), dict(
  DESCRIPTOR = _APPLICATIONINSTANCERECOVER,
  __module__ = 'DiscoveryService_pb2'
  # @@protoc_insertion_point(class_scope:ApplicationInstanceRecover)
  ))
_sym_db.RegisterMessage(ApplicationInstanceRecover)

ApplicationInstanceHeartbeat = _reflection.GeneratedProtocolMessageType('ApplicationInstanceHeartbeat', (_message.Message,), dict(
  DESCRIPTOR = _APPLICATIONINSTANCEHEARTBEAT,
  __module__ = 'DiscoveryService_pb2'
  # @@protoc_insertion_point(class_scope:ApplicationInstanceHeartbeat)
  ))
_sym_db.RegisterMessage(ApplicationInstanceHeartbeat)

OSInfo = _reflection.GeneratedProtocolMessageType('OSInfo', (_message.Message,), dict(
  DESCRIPTOR = _OSINFO,
  __module__ = 'DiscoveryService_pb2'
  # @@protoc_insertion_point(class_scope:OSInfo)
  ))
_sym_db.RegisterMessage(OSInfo)

ServiceNameCollection = _reflection.GeneratedProtocolMessageType('ServiceNameCollection', (_message.Message,), dict(
  DESCRIPTOR = _SERVICENAMECOLLECTION,
  __module__ = 'DiscoveryService_pb2'
  # @@protoc_insertion_point(class_scope:ServiceNameCollection)
  ))
_sym_db.RegisterMessage(ServiceNameCollection)

ServiceNameMappingCollection = _reflection.GeneratedProtocolMessageType('ServiceNameMappingCollection', (_message.Message,), dict(
  DESCRIPTOR = _SERVICENAMEMAPPINGCOLLECTION,
  __module__ = 'DiscoveryService_pb2'
  # @@protoc_insertion_point(class_scope:ServiceNameMappingCollection)
  ))
_sym_db.RegisterMessage(ServiceNameMappingCollection)

ServiceNameMappingElement = _reflection.GeneratedProtocolMessageType('ServiceNameMappingElement', (_message.Message,), dict(
  DESCRIPTOR = _SERVICENAMEMAPPINGELEMENT,
  __module__ = 'DiscoveryService_pb2'
  # @@protoc_insertion_point(class_scope:ServiceNameMappingElement)
  ))
_sym_db.RegisterMessage(ServiceNameMappingElement)

ServiceNameElement = _reflection.GeneratedProtocolMessageType('ServiceNameElement', (_message.Message,), dict(
  DESCRIPTOR = _SERVICENAMEELEMENT,
  __module__ = 'DiscoveryService_pb2'
  # @@protoc_insertion_point(class_scope:ServiceNameElement)
  ))
_sym_db.RegisterMessage(ServiceNameElement)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n org.skywalking.apm.network.protoP\001'))

_INSTANCEDISCOVERYSERVICE = _descriptor.ServiceDescriptor(
  name='InstanceDiscoveryService',
  full_name='InstanceDiscoveryService',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=831,
  serialized_end=1044,
  methods=[
  _descriptor.MethodDescriptor(
    name='register',
    full_name='InstanceDiscoveryService.register',
    index=0,
    containing_service=None,
    input_type=_APPLICATIONINSTANCE,
    output_type=_APPLICATIONINSTANCEMAPPING,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='heartbeat',
    full_name='InstanceDiscoveryService.heartbeat',
    index=1,
    containing_service=None,
    input_type=_APPLICATIONINSTANCEHEARTBEAT,
    output_type=Downstream__pb2._DOWNSTREAM,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='registerRecover',
    full_name='InstanceDiscoveryService.registerRecover',
    index=2,
    containing_service=None,
    input_type=_APPLICATIONINSTANCERECOVER,
    output_type=Downstream__pb2._DOWNSTREAM,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_INSTANCEDISCOVERYSERVICE)

DESCRIPTOR.services_by_name['InstanceDiscoveryService'] = _INSTANCEDISCOVERYSERVICE


_SERVICENAMEDISCOVERYSERVICE = _descriptor.ServiceDescriptor(
  name='ServiceNameDiscoveryService',
  full_name='ServiceNameDiscoveryService',
  file=DESCRIPTOR,
  index=1,
  options=None,
  serialized_start=1046,
  serialized_end=1145,
  methods=[
  _descriptor.MethodDescriptor(
    name='discovery',
    full_name='ServiceNameDiscoveryService.discovery',
    index=0,
    containing_service=None,
    input_type=_SERVICENAMECOLLECTION,
    output_type=_SERVICENAMEMAPPINGCOLLECTION,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_SERVICENAMEDISCOVERYSERVICE)

DESCRIPTOR.services_by_name['ServiceNameDiscoveryService'] = _SERVICENAMEDISCOVERYSERVICE

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class InstanceDiscoveryServiceStub(object):
    """discovery service for application instance, this service is called when application starts
    or http client connection switch to another collector server instance
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.register = channel.unary_unary(
          '/InstanceDiscoveryService/register',
          request_serializer=ApplicationInstance.SerializeToString,
          response_deserializer=ApplicationInstanceMapping.FromString,
          )
      self.heartbeat = channel.unary_unary(
          '/InstanceDiscoveryService/heartbeat',
          request_serializer=ApplicationInstanceHeartbeat.SerializeToString,
          response_deserializer=Downstream__pb2.Downstream.FromString,
          )
      self.registerRecover = channel.unary_unary(
          '/InstanceDiscoveryService/registerRecover',
          request_serializer=ApplicationInstanceRecover.SerializeToString,
          response_deserializer=Downstream__pb2.Downstream.FromString,
          )


  class InstanceDiscoveryServiceServicer(object):
    """discovery service for application instance, this service is called when application starts
    or http client connection switch to another collector server instance
    """

    def register(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def heartbeat(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def registerRecover(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_InstanceDiscoveryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'register': grpc.unary_unary_rpc_method_handler(
            servicer.register,
            request_deserializer=ApplicationInstance.FromString,
            response_serializer=ApplicationInstanceMapping.SerializeToString,
        ),
        'heartbeat': grpc.unary_unary_rpc_method_handler(
            servicer.heartbeat,
            request_deserializer=ApplicationInstanceHeartbeat.FromString,
            response_serializer=Downstream__pb2.Downstream.SerializeToString,
        ),
        'registerRecover': grpc.unary_unary_rpc_method_handler(
            servicer.registerRecover,
            request_deserializer=ApplicationInstanceRecover.FromString,
            response_serializer=Downstream__pb2.Downstream.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'InstanceDiscoveryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class ServiceNameDiscoveryServiceStub(object):
    """discovery service for ServiceName by Network address or application code
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.discovery = channel.unary_unary(
          '/ServiceNameDiscoveryService/discovery',
          request_serializer=ServiceNameCollection.SerializeToString,
          response_deserializer=ServiceNameMappingCollection.FromString,
          )


  class ServiceNameDiscoveryServiceServicer(object):
    """discovery service for ServiceName by Network address or application code
    """

    def discovery(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_ServiceNameDiscoveryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'discovery': grpc.unary_unary_rpc_method_handler(
            servicer.discovery,
            request_deserializer=ServiceNameCollection.FromString,
            response_serializer=ServiceNameMappingCollection.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'ServiceNameDiscoveryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaInstanceDiscoveryServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """discovery service for application instance, this service is called when application starts
    or http client connection switch to another collector server instance
    """
    def register(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def heartbeat(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def registerRecover(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaInstanceDiscoveryServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """discovery service for application instance, this service is called when application starts
    or http client connection switch to another collector server instance
    """
    def register(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    register.future = None
    def heartbeat(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    heartbeat.future = None
    def registerRecover(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    registerRecover.future = None


  def beta_create_InstanceDiscoveryService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('InstanceDiscoveryService', 'heartbeat'): ApplicationInstanceHeartbeat.FromString,
      ('InstanceDiscoveryService', 'register'): ApplicationInstance.FromString,
      ('InstanceDiscoveryService', 'registerRecover'): ApplicationInstanceRecover.FromString,
    }
    response_serializers = {
      ('InstanceDiscoveryService', 'heartbeat'): Downstream__pb2.Downstream.SerializeToString,
      ('InstanceDiscoveryService', 'register'): ApplicationInstanceMapping.SerializeToString,
      ('InstanceDiscoveryService', 'registerRecover'): Downstream__pb2.Downstream.SerializeToString,
    }
    method_implementations = {
      ('InstanceDiscoveryService', 'heartbeat'): face_utilities.unary_unary_inline(servicer.heartbeat),
      ('InstanceDiscoveryService', 'register'): face_utilities.unary_unary_inline(servicer.register),
      ('InstanceDiscoveryService', 'registerRecover'): face_utilities.unary_unary_inline(servicer.registerRecover),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_InstanceDiscoveryService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('InstanceDiscoveryService', 'heartbeat'): ApplicationInstanceHeartbeat.SerializeToString,
      ('InstanceDiscoveryService', 'register'): ApplicationInstance.SerializeToString,
      ('InstanceDiscoveryService', 'registerRecover'): ApplicationInstanceRecover.SerializeToString,
    }
    response_deserializers = {
      ('InstanceDiscoveryService', 'heartbeat'): Downstream__pb2.Downstream.FromString,
      ('InstanceDiscoveryService', 'register'): ApplicationInstanceMapping.FromString,
      ('InstanceDiscoveryService', 'registerRecover'): Downstream__pb2.Downstream.FromString,
    }
    cardinalities = {
      'heartbeat': cardinality.Cardinality.UNARY_UNARY,
      'register': cardinality.Cardinality.UNARY_UNARY,
      'registerRecover': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'InstanceDiscoveryService', cardinalities, options=stub_options)


  class BetaServiceNameDiscoveryServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """discovery service for ServiceName by Network address or application code
    """
    def discovery(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaServiceNameDiscoveryServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """discovery service for ServiceName by Network address or application code
    """
    def discovery(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    discovery.future = None


  def beta_create_ServiceNameDiscoveryService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('ServiceNameDiscoveryService', 'discovery'): ServiceNameCollection.FromString,
    }
    response_serializers = {
      ('ServiceNameDiscoveryService', 'discovery'): ServiceNameMappingCollection.SerializeToString,
    }
    method_implementations = {
      ('ServiceNameDiscoveryService', 'discovery'): face_utilities.unary_unary_inline(servicer.discovery),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_ServiceNameDiscoveryService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('ServiceNameDiscoveryService', 'discovery'): ServiceNameCollection.SerializeToString,
    }
    response_deserializers = {
      ('ServiceNameDiscoveryService', 'discovery'): ServiceNameMappingCollection.FromString,
    }
    cardinalities = {
      'discovery': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'ServiceNameDiscoveryService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
